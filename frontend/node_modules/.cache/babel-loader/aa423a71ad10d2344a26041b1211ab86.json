{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Tim/Desktop/clothes/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,kBAA7C,EAAiEC,WAAjE,EAA8EC,qBAA9E,EAAqGC,kBAArG,EAAyHC,qBAAzH,QAAqJ,4BAArJ;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAIA,UAAMW,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAW,kBAAX,EAA+B;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA/B,EAAkDG,MAAlD,CAArB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,kBADC;AAEPc,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAMAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GAnBD,CAmBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX,eADC;AAEPgB,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFtF,KAAD,CAAR;AAID;AACF,CA1BM;AA4BP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACxCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAER;AAAP,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMuB,QAAQ,GAAG,CAACC,IAAD,EAAOnB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAIA,UAAMQ,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAW,aAAX,EAA0B;AAACY,MAAAA,IAAD;AAAOnB,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAA1B,EAAmDG,MAAnD,CAArB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,qBADC;AAEPU,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,kBADC;AAEPc,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAMAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GAxBD,CAwBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,kBADC;AAEPW,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFtF,KAAD,CAAR;AAID;AACF,CA/BM","sourcesContent":["import axios from \"axios\"\nimport {USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS} from '../constants/userConstants'\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST   \n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const {data} = await axios.post('/api/users/login', {email, password}, config)\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n      \n    })\n\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    })\n  }\n}\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  dispatch({type: USER_LOGOUT})\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST   \n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const {data} = await axios.post('/api/users/', {name, email, password}, config)\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    })\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    })\n\n\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}